from gmpy2 import next_prime,powmod
from random import randint
def Egcd(c, d):
    a = c
    b = d
    s0 = 1
    s1 = 0
    t0 = 0
    t1 = 1
    while a % b != 0:
        gcd = a % b
        q = a // b
        a = b
        b = gcd
        x = s0 - s1 * q
        s0 = s1
        s1 = x
        y = t0 - t1 * q
        t0 = t1
        t1 = y
    gcd = b
    return x, y, gcd


def invmod(a, m):
    return Egcd(a, m)[0] % m

def chaos_maker(p, g, seed):
    res = 0
    x = seed
    for _ in range(randint(0, 114514)):
        x = powmod(g, x, p)
    for i in range(256):
        x = powmod(g, x, p)
        if x < (p-1) // 2:
            res -= (1 << i) - 1
        elif x > (p-1) // 2:
            res += (1 << i) + 1
        else:
            res ^= (1 << i + 1)
    return res if res > 0 else -res

def keygen(p, g):
    u, v = chaos_maker(p, g, randint(0, 1<<64)), chaos_maker(p, g, randint(0, 1<<64))
    return next_prime(u**2 + v**2) * next_prime(2*u*v)

def keygen_check(N,p,g):
    Num=[82708635169511568159693560720491362752335703332600402885326845719937949743067,
        49625181101706940895816136432294817651401421999560241731196107431962769845943,
        16541727033902313631938712144098272550467140666520080577065369143987589948307,
         34921423738238217667426170081985242050986185851542392329360223748418245446709]#尝试后发现随机数生成器只能生成这四个数
    for i in Num:
        for j in Num:
            if next_prime(i**2 +j**2)*next_prime(2*i*j)==N:
                return next_prime(i**2 + j**2),next_prime(2*i*j)
if __name__ == '__main__':
    p = 74318463376311964657848870236469351222861371046000989980725143814597652972079
    g = 10135979321704650132001133858909900216529170765388975908180263641843583056994
    N = 46560744052031492000075598084262814175984839629218579003339825251165084535288738001196294968344403225296587992393409186512832442084313772062189640462381680977493272839744503195012137744652370256066011590369737294828406013950810998314546935103160880000499234316605414326064476117367727072344004644766745175963
    e = 65537
    c = 23334367507777982721463578689282517343702422017568936413397591619899938216343800551132594869485665306596562901129144338015710969994575939792628945297846703002122172051500112438041566171992504143239954624689779597268840813422509867439815100802585538453946245512563984478922752113443379737653491922857109660034
    # for i in range(10):
    #     print(chaos_maker(p, g, randint(0, 1 << 64)))
    p,q=keygen_check(N,p,g)
    d = invmod(e,(p-1)*(q-1))
    m = int(powmod(c, d, N))
    print(int.to_bytes(m,len(hex(m)[2:])//2,'big').decode())